#!/bin/bash

# Entrypoint script for OpenSlides server component

set -e

configure() {
  echo "postgres:5432:instancecfg:openslides:openslides" > "${HOME}/.pgpass"
  chmod 600 "${HOME}/.pgpass"

  python manage.py createsettings
  echo "Creating settings.py"

  # Set our own the Django secret key to make sure it is consistent across
  # nodes
  if [[ -f /run/secrets/django ]]; then
    awk -v sec="'$(< /run/secrets/django)'" '$1 == "SECRET_KEY" { $3 = sec }1' \
      /app/personal_data/var/settings.py > /app/personal_data/var/settings.py.tmp &&
      mv /app/personal_data/var/settings.py.tmp /app/personal_data/var/settings.py
  else
    cat <<-EOF
                 ==============================================
                                    WARNING
                 ==============================================

                   WARNING: no Django SECRET_KEY configured!

               We will be using the Django-generated secret key.

Please be aware that this is an unsuitable setup for for multi-node setups (but
                           fine for Docker Compose).
EOF
fi

  # settings.py customizations for docker-compose setup
  # Email server: use postfix service
  sed -i \
    -e "/EMAIL_HOST\ /s/localhost/postfix/" \
    -e "/EMAIL_PORT/s/587/25/" \
    /app/personal_data/var/settings.py

  # database: use postgres service
  sed -i \
    -e "/'ENGINE':\ 'django\.db\.backends/s/sqlite3/postgresql/" \
    -e "/^\s*'NAME'/s/\(^.*'NAME':\).*/\1\ 'openslides',/" \
    -e "/^\s*'NAME'/a\ \ \ \ \ \ \ \ 'USER': 'openslides',\n \
        'PASSWORD': 'openslides',\n \
        'HOST': 'db',\n \
        'PORT': '5432'" \
    /app/personal_data/var/settings.py

  # Enable redis
  sed -i \
    -e "/use_redis/s/False/True/" \
    /app/personal_data/var/settings.py

  # Redis for Django channels
  sed -i \
    -e "/\"hosts\":.*6379/s/localhost/redis/" \
    /app/personal_data/var/settings.py

  # Redis for collection cache
  sed -i \
    -e "/REDIS_ADDRESS/s/127\.0\.0\.1/rediscache:6379\/0/" \
    /app/personal_data/var/settings.py

  # Redis for session backend
  sed -i \
    -e "/'host':/s/127\.0\.0\.1/redis/" \
    /app/personal_data/var/settings.py

  # Disable DEBUG
  sed -i \
    -e "/^DEBUG/s/True/False/" \
    /app/personal_data/var/settings.py
}

configure_read_only() {
  {
    echo -e '\n# Read-only instance configuration'
    # Revert CHANNEL_LAYERS to back default settings
    echo 'CHANNEL_LAYERS = {"default": {"BACKEND": "channels.layers.InMemoryChannelLayer"}}'
    # Read-only mode specific settings
    echo 'PUSH_INTERVAL = 5'
    echo 'CACHE_RETRY_TIME = 10'
    # XXX this should be here only temporarily until it becomes the default
    echo 'REDIS_ADDRESS = "redis://rediscache-slave:6379/0"'
  } >> /app/personal_data/var/settings.py
}

retrieve_settingspy_from_db() {
  mkdir -p /app/personal_data/var
  psql -h db -d instancecfg -qtA \
    -c 'SELECT data from django ORDER BY id DESC LIMIT 1' > \
    /app/personal_data/var/settings.py
}

insert_settings_into_db() {
  local b64="$(base64 < "/app/personal_data/var/settings.py")"
  psql -h db -d instancecfg \
    -c "INSERT INTO django(filename, data, from_host)
      VALUES(
        'settings.py',
        convert_from(decode('$b64','base64'), 'utf-8'),
        '$(hostname)'
      )"
}

create_or_retrieve_settings() {
  if [[ ! -f /app/personal_data/var/settings.py ]]; then
    # if file does not exist yet, check if it already exists in DB
    echo "settings.py file not found"
    settings_exist_in_db="$(psql -h db -d instancecfg -qtA \
      -c "SELECT exists(SELECT 1 FROM django WHERE filename = 'settings.py')")"
    if [[ "$settings_exist_in_db" = "t" ]]; then
      echo "settings.py file found in database; retrieving..."
      retrieve_settingspy_from_db
    else
      echo "settings.py also not found in database"
      # this container is the first to generate settings.py
      echo "Generating a new settings.py from template..."
      configure
      if [[ "$INSTANCE_IS_READONLY" ]]; then
        echo "Configuring instance as read-only mirror"
        configure_read_only
      fi
      echo "Storing settings.py in database..."
      insert_settings_into_db
    fi
  else
    echo "Found settings.py file"
  fi
}


sudo /usr/local/bin/update-openslides-app

# Enable OpenSlides-specific DEBUG output
export OPENSLIDES_LOG_LEVEL=DEBUG

# For secondary server instances, skip migrations etc. and instead
# only wait for the main server instance to become available.
if [[ "$SERVER_IS_SECONDARY" ]]; then
  echo "This is a secondary server instance.  Waiting for main server..."
  wait-for-it --timeout=0 prioserver:8000
  create_or_retrieve_settings
  exec $*
fi

wait-for-it --timeout=60 db:5432

create_or_retrieve_settings
# Transfer file-based markers from legacy DBs to database
if [[ -f /app/personal_data/admin-password-set ]]; then
    psql -h db -d instancecfg -a \
        -c "UPDATE markers SET configured = true WHERE name = 'admin'"
    rm /app/personal_data/admin-password-set
fi
if [[ -f /app/personal_data/user-added ]]; then
    psql -h db -d instancecfg -a \
        -c "UPDATE markers SET configured = true WHERE name = 'user'"
    rm /app/personal_data/user-added
fi

# Read config from database
read -ra admin_marker < <(psql -h db -d instancecfg -qtAF, \
    -c "SELECT configured FROM markers WHERE name = 'admin'")
read -ra user_marker < <(psql -h db -d instancecfg -qtAF, \
    -c "SELECT configured FROM markers WHERE name = 'user'")

echo 'running migrations'
python manage.py migrate

if [[ -f /run/secrets/os_admin ]]; then
  if [[ "$admin_marker" = "f" ]]; then
    echo "Retrieving secure admin password"
    source /run/secrets/os_admin
    [[ -n "${OPENSLIDES_ADMIN_PASSWORD}" ]] || {
      echo "ERROR: OpenSlides admin password not set.  Aborting."
      exit 2
    }
    echo 'change admin password'
    python manage.py insecurechangepassword admin "${OPENSLIDES_ADMIN_PASSWORD}"
    # Make note of changed admin password
    psql -h db -d instancecfg -a \
        -c "UPDATE markers SET configured = true WHERE name = 'admin'"
  fi
elif [[ "$admin_marker" = "t" ]]; then
  echo "Admin password already set; nothing to do."
else
  cat <<-EOF

                 ==============================================
                                    WARNING
                 ==============================================

                 WARNING: INSECURE ADMIN ACCOUNT CONFIGURATION!

EOF
  sleep 10
fi

if [[ -f /run/secrets/os_user ]] && [[ "$user_marker" = "f" ]]; then
  echo "Retrieving user credentials"
  source /run/secrets/os_user
  if [[ -n "${OPENSLIDES_USER_FIRSTNAME}" ]] &&
      [[ -n "${OPENSLIDES_USER_LASTNAME}" ]] &&
      [[ -n "${OPENSLIDES_USER_PASSWORD}" ]]; then
    user_name="${OPENSLIDES_USER_FIRSTNAME} ${OPENSLIDES_USER_LASTNAME}"
    echo "Adding user: ${user_name}"
    # createopenslidesuser: error: the following arguments are required:
    # first_name, last_name, username, password, groups_id
    python manage.py createopenslidesuser \
      "${OPENSLIDES_USER_FIRSTNAME}" \
      "${OPENSLIDES_USER_LASTNAME}" \
      "${user_name}" \
      "${OPENSLIDES_USER_PASSWORD}" \
      2
    # Make note of changed admin password
    psql -h db -d instancecfg -a \
        -c "UPDATE markers SET configured = true WHERE name = 'user'"
  else
    echo "Incomplete user account data.  Skipping account creation."
  fi
fi


echo 'executing server'
printf 'INFO: Running CMD: "%s".\n' "$*"

# Expected commands are one of:
# - daphne -b 0.0.0.0 -p 8000 openslides.asgi:application
# - gunicorn -w 4 -b 0.0.0.0:8000 -k uvicorn.workers.UvicornWorker \
#   openslides.asgi:application
exec $*
