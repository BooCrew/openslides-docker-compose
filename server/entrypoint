#!/bin/bash

# Entrypoint script for OpenSlides server component

set -e

# For secondary/priority server instances, skip migrations etc. and instead
# only wait for the main server instance to become available.
if [[ "$SERVER_IS_SECONDARY" ]]; then
  echo "This is a secondary server instance.  Waiting for main server..."
  wait-for-it --timeout=20 server:8000
  exec $*
fi

if [[ ! -f personal_data/var/settings.py ]]; then
  python manage.py createsettings
  echo "Creating settings.py"

  # settings.py customizations for docker-compose setup
  # Email server: use postfix service
  sed -i \
    -e "/EMAIL_HOST\ /s/localhost/postfix/" \
    -e "/EMAIL_PORT/s/587/25/" \
    personal_data/var/settings.py

  # database: use postgres service
  sed -i \
    -e "/'ENGINE':\ 'django\.db\.backends/s/sqlite3/postgresql/" \
    -e "/^\s*'NAME'/s/\(^.*'NAME':\).*/\1\ 'openslides',/" \
    -e "/^\s*'NAME'/a\ \ \ \ \ \ \ \ 'USER': 'openslides',\n \
        'PASSWORD': 'openslides',\n \
        'HOST': 'postgres',\n \
        'PORT': '5432'" \
    personal_data/var/settings.py

  # Enable redis
  sed -i \
    -e "/use_redis/s/False/True/" \
    personal_data/var/settings.py

  # Redis for Django channels
  sed -i \
    -e "/\"hosts\":.*6379/s/localhost/redis/" \
    personal_data/var/settings.py

  # Redis for collection cache
  sed -i \
    -e "/REDIS_ADDRESS/s/127\.0\.0\.1/rediscache:6379\/0/" \
    personal_data/var/settings.py

  # Redis for session backend
  sed -i \
    -e "/'host':/s/127\.0\.0\.1/redis/" \
    personal_data/var/settings.py

  # Disable DEBUG
  sed -i \
    -e "/^DEBUG/s/True/False/" \
    personal_data/var/settings.py
fi

wait-for-it --timeout=5 postgres:5432

echo 'running migrations'
python manage.py migrate

if [[ -f /run/secrets/os_admin ]]; then
  if [[ ! -f /app/personal_data/admin-password-set ]]; then
    echo "Retrieving secure admin password"
    source /run/secrets/os_admin
    [[ -n "${OPENSLIDES_ADMIN_PASSWORD}" ]] || {
      echo "ERROR: OpenSlides admin password not set.  Aborting."
      exit 2
    }
    echo 'change admin password'
    python manage.py insecurechangepassword admin "${OPENSLIDES_ADMIN_PASSWORD}"
    # Note password change in persistent volume
    touch /app/personal_data/admin-password-set
  fi
elif [[  -f /app/personal_data/admin-password-set ]]; then
  echo "Admin password already set; nothing to do."
else
  cat <<-EOF

                 ==============================================
                                    WARNING
                 ==============================================

                 WARNING: INSECURE ADMIN ACCOUNT CONFIGURATION!

EOF
  sleep 10
fi

if [[ -f /run/secrets/os_user ]] && [[ ! -f /app/personal_data/user-added ]]; then
  echo "Retrieving user credentials"
  source /run/secrets/os_user
  if [[ -n "${OPENSLIDES_USER_FIRSTNAME}" ]] &&
      [[ -n "${OPENSLIDES_USER_LASTNAME}" ]] &&
      [[ -n "${OPENSLIDES_USER_PASSWORD}" ]]; then
    user_name="${OPENSLIDES_USER_FIRSTNAME} ${OPENSLIDES_USER_LASTNAME}"
    echo "Adding user: ${user_name}"
    # createopenslidesuser: error: the following arguments are required:
    # first_name, last_name, username, password, groups_id
    python manage.py createopenslidesuser \
      "${OPENSLIDES_USER_FIRSTNAME}" \
      "${OPENSLIDES_USER_LASTNAME}" \
      "${user_name}" \
      "${OPENSLIDES_USER_PASSWORD}" \
      2
    # Note password change in persistent volume
    touch /app/personal_data/user-added
  else
    echo "Incomplete user account data.  Skipping account creation."
  fi
fi


echo 'executing server'
printf 'INFO: Running CMD: "%s".\n' "$*"

# Expected commands are one of:
# - daphne -b 0.0.0.0 -p 8000 openslides.asgi:application
# - gunicorn -w 4 -b 0.0.0.0:8000 -k uvicorn.workers.UvicornWorker \
#   openslides.asgi:application
exec $*
